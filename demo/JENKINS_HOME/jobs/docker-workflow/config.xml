<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1.8">
  <actions/>
  <description>Demonstrates Jenkins Workflow integration with Docker based on CloudBees Docker Workflow Plugin.&#xd;
  </description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@1.8">
    <script>node {
def maven = docker.image(&apos;maven:3.3.3-jdk-8&apos;); // https://registry.hub.docker.com/_/maven/

stage &apos;Mirror&apos;
// First make sure the slave has this image.
// (If you could set your registry below to mirror Docker Hub,
// this would be unnecessary as maven.inside would pull the image.)
maven.pull()
// We are pushing to a private secure docker registry in this demo.
// &apos;docker-registry-login&apos; is the username/password credentials ID as defined in Jenkins Credentials.
// This is used to authenticate the docker client to the registry.
docker.withRegistry(&apos;https://docker.example.com/&apos;, &apos;docker-registry-login&apos;) {

    stage &apos;Build&apos;

    // spin up a Maven container to build the petclinic app from source
    // (we are only using -v here to share the Maven local repository across demo runs; otherwise would set localRepository=${pwd}/m2repo)
    def pcImg
    dir(&apos;app&apos;) {
    maven.inside(&apos;-v /m2repo:/m2repo&apos;) {
        // Check out the source code.
        git &apos;https://github.com/tfennelly/spring-petclinic.git&apos;

        // Set up a shared Maven repo so we don&apos;t need to download all dependencies on every build.
        writeFile file: &apos;settings.xml&apos;, text: &apos;&lt;settings&gt;&lt;localRepository&gt;/m2repo&lt;/localRepository&gt;&lt;/settings&gt;&apos;
        // Build with Maven settings.xml file that specs the local Maven repo.
        sh &apos;mvn -B -s settings.xml clean install -DskipTests&apos;

        // The app .war and Dockerfile are now available in the workspace. See below.
    }
    
    stage &apos;Bake Docker image&apos;
    // use the spring-petclinic Dockerfile (see above &apos;maven.inside()&apos; block)
    // to build container that can run the app. The Dockerfile is in the cwd of the active workspace
    // (see above maven.inside() block), so we pass &apos;.&apos; as the build PATH param. The Dockerfile
    // (see https://github.com/tfennelly/spring-petclinic/blob/master/Dockerfile) expects the petclinic.war
    // file to be in the &apos;target&apos; dir of the workspace, which will be the case.
      pcImg = docker.build(&quot;examplecorp/spring-petclinic:${env.BUILD_TAG}&quot;, &apos;.&apos;)
    }

    // Let&apos;s tag and push the newly built image. Will tag using the image name provided
    // in the &apos;docker.build&apos; call above (which included the build number on the tag).
    pcImg.push();

    stage &apos;Test Image&apos;
    // Run the petclinic app in its own docker container
    pcImg.withRun {petclinic -&gt;
        dir(&apos;test&apos;) {
        git url: &apos;https://github.com/jglick/spring-petclinic-tests.git&apos;, branch: &apos;selenium&apos;

        // Spin up a maven + xvnc test container, linking it to the petclinic app container allowing
        // the maven tests to fire HTTP requests between the containers.
        docker.build(&apos;examplecorp/spring-petclinic-tests:snapshot&apos;).inside(&quot;-v /m2repo:/m2repo --link=${petclinic.id}:petclinic&quot;) {
            writeFile file: &apos;settings.xml&apos;, text: &apos;&lt;settings&gt;&lt;localRepository&gt;/m2repo&lt;/localRepository&gt;&lt;/settings&gt;&apos;
            wrap([$class: &apos;Xvnc&apos;, takeScreenshot: false, useXauthority: true]) {
              sh &apos;mvn -B -s settings.xml clean package&apos;
            }
        }
        }
    }

    stage name: &apos;Promote Image&apos;, concurrency: 1
    // All the tests passed. We can now retag and push the &apos;latest&apos; image
    pcImg.push(&apos;latest&apos;);    
}
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>